C:\Users\ivan\.gradle\caches\transforms-3\95aa226eacca12cc12323d65fdade91f\transformed\fragment-1.4.1\jars\lint.jar: Warning: Library lint checks out of date;
these checks will be skipped!

Lint found an issue registry (androidx.fragment.lint.FragmentIssueRegistry)
which was compiled against an older version of lint
than this one. This is usually fine, but not in this
case; some basic verification shows that the lint
check jar references (for example) the following API
which is no longer valid in this version of lint:
org.jetbrains.uast.kotlin.KotlinUClass: org.jetbrains.kotlin.psi.KtClassOrObject getKtClass()
(Referenced from androidx/fragment/lint/OnCreateDialogIncorrectCallbackDetector$UastHandler.class)

Therefore, this lint check library is not included
in analysis. This affects the following lint checks:
FragmentTagUsage
FragmentAddMenuProvider
FragmentBackPressedCallback
FragmentLiveDataObserve
UseRequireInsteadOfGet
UseGetLayoutInflater
DialogFragmentCallbacksDetector
UnsafeRepeatOnLifecycleDetector
DetachAndAttachSameFragment

Recompile the checks against the latest version, or if
this is a check bundled with a third-party library, see
if there is a more recent version available.

Version of Lint API this lint check is using is 11.
The Lint API version currently running is 13 (7.3+). [ObsoleteLintCustomCheck]

   Explanation for issues of type "ObsoleteLintCustomCheck":
   Lint can be extended with "custom checks": additional checks implemented by
   developers and libraries to for example enforce specific API usages
   required by a library or a company coding style guideline.

   The Lint APIs are not yet stable, so these checks may either cause a
   performance degradation, or stop working, or provide wrong results.

   This warning flags custom lint checks that are found to be using obsolete
   APIs and will need to be updated to run in the current lint environment.

   It may also flag issues found to be using a newer version of the API,
   meaning that you need to use a newer version of lint (or Android Studio or
   Gradle plugin etc) to work with these checks.

D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-file-system\android\src\main\AndroidManifest.xml:5: Warning: WRITE_EXTERNAL_STORAGE no longer provides write access when targeting Android 10+ [ScopedStorage]
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ScopedStorage":
   Scoped storage is enforced on Android 10+ (or Android 11+ if using
   requestLegacyExternalStorage). In particular, WRITE_EXTERNAL_STORAGE will
   no longer provide write access to all files; it will provide the equivalent
   of READ_EXTERNAL_STORAGE instead.

   The MANAGE_EXTERNAL_STORAGE permission can be used to manage all files, but
   it is rarely necessary and most apps on Google Play are not allowed to use
   it. Most apps should instead migrate to use scoped storage. To modify or
   delete files, apps should request write access from the user as described
   at https://goo.gle/android-mediastore-createwriterequest.

   To learn more, read these resources: Play policy:
   https://goo.gle/policy-storage-help Allowable use cases:
   https://goo.gle/policy-storage-usecases

   https://goo.gle/android-storage-usecases

D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-file-system\android\src\main\java\expo\modules\filesystem\FileSystemModule.kt:205: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
    var resourceId = context.resources.getIdentifier(resourceName, "raw", context.packageName)
                                       ~~~~~~~~~~~~~
D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-file-system\android\src\main\java\expo\modules\filesystem\FileSystemModule.kt:208: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
      resourceId = context.resources.getIdentifier(resourceName, "drawable", context.packageName)
                                     ~~~~~~~~~~~~~
D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-file-system\android\src\main\java\expo\modules\filesystem\FileSystemModule.kt:911: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
          val resourceId = resources.getIdentifier(url, "raw", packageName)
                                     ~~~~~~~~~~~~~

   Explanation for issues of type "DiscouragedApi":
   Discouraged APIs are allowed and are not deprecated, but they may be unfit
   for common use (e.g. due to slow performance or subtle behavior).

D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-file-system\android\src\main\java\expo\modules\filesystem\FileSystemModule.kt:1101: Warning: This AsyncTask class should be static or leaks might occur (expo.modules.filesystem.FileSystemModule.DownloadResumableTask) [StaticFieldLeak]
  private inner class DownloadResumableTask : AsyncTask<DownloadResumableTaskParams?, Void?, Void?>() {
                      ~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "StaticFieldLeak":
   A static field will leak contexts.

   Non-static inner classes have an implicit reference to their outer class.
   If that outer class is for example a Fragment or Activity, then this
   reference means that the long-running handler/loader/task will hold a
   reference to the activity which prevents it from getting garbage
   collected.

   Similarly, direct field references to activities and fragments from these
   longer running instances can cause leaks.

   ViewModel classes should never point to Views or non-application Contexts.

0 errors, 6 warnings
