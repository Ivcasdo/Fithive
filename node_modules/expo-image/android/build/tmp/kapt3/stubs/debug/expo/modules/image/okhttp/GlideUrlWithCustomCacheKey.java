package expo.modules.image.okhttp;

import java.lang.System;

/**
 * GlideUrl with custom cache key.
 * It wraps the base implementation and overrides logic behind cache key and when two
 * objects are equal. Typically, Glide uses the only cache key to compare objects.
 * It won't suit our use case. We want to make custom cache key transparent and
 * not use it to compare objects.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000,\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\b\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0003\u0018\u00002\u00020\u0001B!\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0007J\u0013\u0010\n\u001a\u00020\u000b2\b\u0010\f\u001a\u0004\u0018\u00010\rH\u0096\u0002J\b\u0010\u000e\u001a\u00020\u0003H\u0002J\b\u0010\u000f\u001a\u00020\u0003H\u0016J\b\u0010\b\u001a\u00020\tH\u0016R\u000e\u0010\u0006\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\b\u001a\u00020\tX\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0010"}, d2 = {"Lexpo/modules/image/okhttp/GlideUrlWithCustomCacheKey;", "Lcom/bumptech/glide/load/model/GlideUrl;", "uri", "", "headers", "Lcom/bumptech/glide/load/model/Headers;", "cacheKey", "(Ljava/lang/String;Lcom/bumptech/glide/load/model/Headers;Ljava/lang/String;)V", "hashCode", "", "equals", "", "other", "", "getBaseCacheKey", "getCacheKey", "expo-image_debug"})
public final class GlideUrlWithCustomCacheKey extends com.bumptech.glide.load.model.GlideUrl {
    private final java.lang.String cacheKey = null;
    
    /**
     * Cached hash code value
     */
    private int hashCode = 0;
    
    public GlideUrlWithCustomCacheKey(@org.jetbrains.annotations.Nullable
    java.lang.String uri, @org.jetbrains.annotations.Nullable
    com.bumptech.glide.load.model.Headers headers, @org.jetbrains.annotations.NotNull
    java.lang.String cacheKey) {
        super(null);
    }
    
    /**
     * @return a super cache key from [GlideUrl]
     */
    private final java.lang.String getBaseCacheKey() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.lang.String getCacheKey() {
        return null;
    }
    
    @java.lang.Override
    public boolean equals(@org.jetbrains.annotations.Nullable
    java.lang.Object other) {
        return false;
    }
    
    @java.lang.Override
    public int hashCode() {
        return 0;
    }
}