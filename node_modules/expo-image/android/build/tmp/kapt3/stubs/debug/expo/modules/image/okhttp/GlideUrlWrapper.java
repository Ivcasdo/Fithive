package expo.modules.image.okhttp;

import java.lang.System;

/**
 * To connect listener with the request we have to create custom model.
 * In that way, we're passing more information to the final data loader.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000.\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0010\u000e\n\u0000\b\u0086\b\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004J\t\u0010\r\u001a\u00020\u0003H\u00c6\u0003J\u0013\u0010\u000e\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u0003H\u00c6\u0001J\u0013\u0010\u000f\u001a\u00020\u00102\b\u0010\u0011\u001a\u0004\u0018\u00010\u0001H\u00d6\u0003J\t\u0010\u0012\u001a\u00020\u0013H\u00d6\u0001J\b\u0010\u0014\u001a\u00020\u0015H\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006R\u001c\u0010\u0007\u001a\u0004\u0018\u00010\bX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\t\u0010\n\"\u0004\b\u000b\u0010\f\u00a8\u0006\u0016"}, d2 = {"Lexpo/modules/image/okhttp/GlideUrlWrapper;", "", "glideUrl", "Lcom/bumptech/glide/load/model/GlideUrl;", "(Lcom/bumptech/glide/load/model/GlideUrl;)V", "getGlideUrl", "()Lcom/bumptech/glide/load/model/GlideUrl;", "progressListener", "Lexpo/modules/image/events/OkHttpProgressListener;", "getProgressListener", "()Lexpo/modules/image/events/OkHttpProgressListener;", "setProgressListener", "(Lexpo/modules/image/events/OkHttpProgressListener;)V", "component1", "copy", "equals", "", "other", "hashCode", "", "toString", "", "expo-image_debug"})
public final class GlideUrlWrapper {
    @org.jetbrains.annotations.NotNull
    private final com.bumptech.glide.load.model.GlideUrl glideUrl = null;
    @org.jetbrains.annotations.Nullable
    private expo.modules.image.events.OkHttpProgressListener progressListener;
    
    /**
     * To connect listener with the request we have to create custom model.
     * In that way, we're passing more information to the final data loader.
     */
    @org.jetbrains.annotations.NotNull
    public final expo.modules.image.okhttp.GlideUrlWrapper copy(@org.jetbrains.annotations.NotNull
    com.bumptech.glide.load.model.GlideUrl glideUrl) {
        return null;
    }
    
    /**
     * To connect listener with the request we have to create custom model.
     * In that way, we're passing more information to the final data loader.
     */
    @java.lang.Override
    public boolean equals(@org.jetbrains.annotations.Nullable
    java.lang.Object other) {
        return false;
    }
    
    /**
     * To connect listener with the request we have to create custom model.
     * In that way, we're passing more information to the final data loader.
     */
    @java.lang.Override
    public int hashCode() {
        return 0;
    }
    
    public GlideUrlWrapper(@org.jetbrains.annotations.NotNull
    com.bumptech.glide.load.model.GlideUrl glideUrl) {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    public final com.bumptech.glide.load.model.GlideUrl component1() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final com.bumptech.glide.load.model.GlideUrl getGlideUrl() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final expo.modules.image.events.OkHttpProgressListener getProgressListener() {
        return null;
    }
    
    public final void setProgressListener(@org.jetbrains.annotations.Nullable
    expo.modules.image.events.OkHttpProgressListener p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.lang.String toString() {
        return null;
    }
}