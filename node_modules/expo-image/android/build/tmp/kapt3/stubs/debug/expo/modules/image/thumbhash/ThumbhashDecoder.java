package expo.modules.image.thumbhash;

import java.lang.System;

@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u00006\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0012\n\u0000\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0010\u0007\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\b\u00c6\u0002\u0018\u00002\u00020\u0001:\u0003\u0012\u0013\u0014B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\u001e\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\u00062\u0006\u0010\b\u001a\u00020\u0004J\u000e\u0010\t\u001a\u00020\n2\u0006\u0010\u000b\u001a\u00020\u0004J\u000e\u0010\f\u001a\u00020\r2\u0006\u0010\u000b\u001a\u00020\u0004J\u000e\u0010\u000e\u001a\u00020\u000f2\u0006\u0010\u000b\u001a\u00020\u0004J\u000e\u0010\u0010\u001a\u00020\u00112\u0006\u0010\u000b\u001a\u00020\u0004\u00a8\u0006\u0015"}, d2 = {"Lexpo/modules/image/thumbhash/ThumbhashDecoder;", "", "()V", "rgbaToThumbHash", "", "w", "", "h", "rgba", "thumbHashToApproximateAspectRatio", "", "hash", "thumbHashToAverageRGBA", "Lexpo/modules/image/thumbhash/ThumbhashDecoder$RGBA;", "thumbHashToBitmap", "Landroid/graphics/Bitmap;", "thumbHashToRGBA", "Lexpo/modules/image/thumbhash/ThumbhashDecoder$Image;", "Channel", "Image", "RGBA", "expo-image_debug"})
public final class ThumbhashDecoder {
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.image.thumbhash.ThumbhashDecoder INSTANCE = null;
    
    private ThumbhashDecoder() {
        super();
    }
    
    /**
     * Encodes an RGBA image to a ThumbHash. RGB should not be premultiplied by A.
     *
     * @param w    The width of the input image. Must be ≤100px.
     * @param h    The height of the input image. Must be ≤100px.
     * @param rgba The pixels in the input image, row-by-row. Must have w*h*4 elements.
     * @return The ThumbHash as a byte array.
     */
    @org.jetbrains.annotations.NotNull
    public final byte[] rgbaToThumbHash(int w, int h, @org.jetbrains.annotations.NotNull
    byte[] rgba) {
        return null;
    }
    
    /**
     * Decodes a ThumbHash to an RGBA image. RGB is not be premultiplied by A.
     *
     * @param hash The bytes of the ThumbHash.
     * @return The width, height, and pixels of the rendered placeholder image.
     */
    @org.jetbrains.annotations.NotNull
    public final expo.modules.image.thumbhash.ThumbhashDecoder.Image thumbHashToRGBA(@org.jetbrains.annotations.NotNull
    byte[] hash) {
        return null;
    }
    
    /**
     * Converts a ThumbHash into a Bitmap image
     */
    @org.jetbrains.annotations.NotNull
    public final android.graphics.Bitmap thumbHashToBitmap(@org.jetbrains.annotations.NotNull
    byte[] hash) {
        return null;
    }
    
    /**
     * Extracts the average color from a ThumbHash. RGB is not be premultiplied by A.
     *
     * @param hash The bytes of the ThumbHash.
     * @return The RGBA values for the average color. Each value ranges from 0 to 1.
     */
    @org.jetbrains.annotations.NotNull
    public final expo.modules.image.thumbhash.ThumbhashDecoder.RGBA thumbHashToAverageRGBA(@org.jetbrains.annotations.NotNull
    byte[] hash) {
        return null;
    }
    
    /**
     * Extracts the approximate aspect ratio of the original image.
     *
     * @param hash The bytes of the ThumbHash.
     * @return The approximate aspect ratio (i.e. width / height).
     */
    public final float thumbHashToApproximateAspectRatio(@org.jetbrains.annotations.NotNull
    byte[] hash) {
        return 0.0F;
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u001a\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\b\n\u0002\b\u0002\n\u0002\u0010\u0012\n\u0002\b\f\u0018\u00002\u00020\u0001B\u001d\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0006\u0010\u0005\u001a\u00020\u0006\u00a2\u0006\u0002\u0010\u0007R\u001a\u0010\u0004\u001a\u00020\u0003X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\b\u0010\t\"\u0004\b\n\u0010\u000bR\u001a\u0010\u0005\u001a\u00020\u0006X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\f\u0010\r\"\u0004\b\u000e\u0010\u000fR\u001a\u0010\u0002\u001a\u00020\u0003X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0010\u0010\t\"\u0004\b\u0011\u0010\u000b\u00a8\u0006\u0012"}, d2 = {"Lexpo/modules/image/thumbhash/ThumbhashDecoder$Image;", "", "width", "", "height", "rgba", "", "(II[B)V", "getHeight", "()I", "setHeight", "(I)V", "getRgba", "()[B", "setRgba", "([B)V", "getWidth", "setWidth", "expo-image_debug"})
    public static final class Image {
        private int width;
        private int height;
        @org.jetbrains.annotations.NotNull
        private byte[] rgba;
        
        public Image(int width, int height, @org.jetbrains.annotations.NotNull
        byte[] rgba) {
            super();
        }
        
        public final int getWidth() {
            return 0;
        }
        
        public final void setWidth(int p0) {
        }
        
        public final int getHeight() {
            return 0;
        }
        
        public final void setHeight(int p0) {
        }
        
        @org.jetbrains.annotations.NotNull
        public final byte[] getRgba() {
            return null;
        }
        
        public final void setRgba(@org.jetbrains.annotations.NotNull
        byte[] p0) {
        }
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u0007\n\u0002\b\u000f\u0018\u00002\u00020\u0001B%\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0006\u0010\u0005\u001a\u00020\u0003\u0012\u0006\u0010\u0006\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0007R\u001a\u0010\u0006\u001a\u00020\u0003X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\b\u0010\t\"\u0004\b\n\u0010\u000bR\u001a\u0010\u0005\u001a\u00020\u0003X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\f\u0010\t\"\u0004\b\r\u0010\u000bR\u001a\u0010\u0004\u001a\u00020\u0003X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u000e\u0010\t\"\u0004\b\u000f\u0010\u000bR\u001a\u0010\u0002\u001a\u00020\u0003X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0010\u0010\t\"\u0004\b\u0011\u0010\u000b\u00a8\u0006\u0012"}, d2 = {"Lexpo/modules/image/thumbhash/ThumbhashDecoder$RGBA;", "", "r", "", "g", "b", "a", "(FFFF)V", "getA", "()F", "setA", "(F)V", "getB", "setB", "getG", "setG", "getR", "setR", "expo-image_debug"})
    public static final class RGBA {
        private float r;
        private float g;
        private float b;
        private float a;
        
        public RGBA(float r, float g, float b, float a) {
            super();
        }
        
        public final float getR() {
            return 0.0F;
        }
        
        public final void setR(float p0) {
        }
        
        public final float getG() {
            return 0.0F;
        }
        
        public final void setG(float p0) {
        }
        
        public final float getB() {
            return 0.0F;
        }
        
        public final void setB(float p0) {
        }
        
        public final float getA() {
            return 0.0F;
        }
        
        public final void setA(float p0) {
        }
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000*\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0010\u0014\n\u0002\b\u0005\n\u0002\u0010\u0007\n\u0002\b\u000f\n\u0002\u0010\u0012\n\u0002\b\b\b\u0002\u0018\u00002\u00020\u0001B\u0017\b\u0000\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0005J&\u0010\u001b\u001a\u00020\u00032\u0006\u0010\u001c\u001a\u00020\u001d2\u0006\u0010\u001e\u001a\u00020\u00032\u0006\u0010\u001f\u001a\u00020\u00032\u0006\u0010\u0018\u001a\u00020\rJ\u001e\u0010 \u001a\u00020\u00002\u0006\u0010!\u001a\u00020\u00032\u0006\u0010\"\u001a\u00020\u00032\u0006\u0010#\u001a\u00020\u0007J\u001e\u0010$\u001a\u00020\u00032\u0006\u0010\u001c\u001a\u00020\u001d2\u0006\u0010\u001e\u001a\u00020\u00032\u0006\u0010\u001f\u001a\u00020\u0003R\u001a\u0010\u0006\u001a\u00020\u0007X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\b\u0010\t\"\u0004\b\n\u0010\u000bR\u001a\u0010\f\u001a\u00020\rX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u000e\u0010\u000f\"\u0004\b\u0010\u0010\u0011R\u001a\u0010\u0002\u001a\u00020\u0003X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0012\u0010\u0013\"\u0004\b\u0014\u0010\u0015R\u001a\u0010\u0004\u001a\u00020\u0003X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0016\u0010\u0013\"\u0004\b\u0017\u0010\u0015R\u001a\u0010\u0018\u001a\u00020\rX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0019\u0010\u000f\"\u0004\b\u001a\u0010\u0011\u00a8\u0006%"}, d2 = {"Lexpo/modules/image/thumbhash/ThumbhashDecoder$Channel;", "", "nx", "", "ny", "(II)V", "ac", "", "getAc", "()[F", "setAc", "([F)V", "dc", "", "getDc", "()F", "setDc", "(F)V", "getNx", "()I", "setNx", "(I)V", "getNy", "setNy", "scale", "getScale", "setScale", "decode", "hash", "", "start", "index", "encode", "w", "h", "channel", "writeTo", "expo-image_debug"})
    static final class Channel {
        private int nx;
        private int ny;
        private float dc = 0.0F;
        @org.jetbrains.annotations.NotNull
        private float[] ac;
        private float scale = 0.0F;
        
        public Channel(int nx, int ny) {
            super();
        }
        
        public final int getNx() {
            return 0;
        }
        
        public final void setNx(int p0) {
        }
        
        public final int getNy() {
            return 0;
        }
        
        public final void setNy(int p0) {
        }
        
        public final float getDc() {
            return 0.0F;
        }
        
        public final void setDc(float p0) {
        }
        
        @org.jetbrains.annotations.NotNull
        public final float[] getAc() {
            return null;
        }
        
        public final void setAc(@org.jetbrains.annotations.NotNull
        float[] p0) {
        }
        
        public final float getScale() {
            return 0.0F;
        }
        
        public final void setScale(float p0) {
        }
        
        @org.jetbrains.annotations.NotNull
        public final expo.modules.image.thumbhash.ThumbhashDecoder.Channel encode(int w, int h, @org.jetbrains.annotations.NotNull
        float[] channel) {
            return null;
        }
        
        public final int decode(@org.jetbrains.annotations.NotNull
        byte[] hash, int start, int index, float scale) {
            return 0;
        }
        
        public final int writeTo(@org.jetbrains.annotations.NotNull
        byte[] hash, int start, int index) {
            return 0;
        }
    }
}