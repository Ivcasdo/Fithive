package expo.modules.image;

import java.lang.System;

/**
 * A custom target to provide a smooth transition between multiple drawables.
 * It delegates images to the [ExpoImageViewWrapper], where we handle the loaded [Drawable].
 * When the target is cleared, we don't do anything. The [ExpoImageViewWrapper] is responsible for
 * clearing bitmaps before freeing targets. That may be error-prone, but that is the only way
 * of implementing the transition between bitmaps.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\\\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0005\u0018\u00002\b\u0012\u0004\u0012\u00020\u00020\u0001B\u0013\u0012\f\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u0004\u00a2\u0006\u0002\u0010\u0006J\u000e\u0010\"\u001a\u00020#2\u0006\u0010$\u001a\u00020%J\n\u0010&\u001a\u0004\u0018\u00010\u0016H\u0016J\u0010\u0010\'\u001a\u00020#2\u0006\u0010(\u001a\u00020)H\u0016J\b\u0010*\u001a\u00020#H\u0016J\u0012\u0010+\u001a\u00020#2\b\u0010,\u001a\u0004\u0018\u00010\u0002H\u0016J\u0012\u0010-\u001a\u00020#2\b\u0010.\u001a\u0004\u0018\u00010\u0002H\u0016J\u0012\u0010/\u001a\u00020#2\b\u0010,\u001a\u0004\u0018\u00010\u0002H\u0016J\"\u00100\u001a\u00020#2\u0006\u00101\u001a\u00020\u00022\u0010\u00102\u001a\f\u0012\u0006\b\u0000\u0012\u00020\u0002\u0018\u000103H\u0016J\b\u00104\u001a\u00020#H\u0016J\b\u00105\u001a\u00020#H\u0016J\u0010\u00106\u001a\u00020#2\u0006\u0010(\u001a\u00020)H\u0016J\u0012\u00107\u001a\u00020#2\b\u0010\u0015\u001a\u0004\u0018\u00010\u0016H\u0016R\u001a\u0010\u0007\u001a\u00020\bX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\t\u0010\n\"\u0004\b\u000b\u0010\fR\u0014\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u001a\u0010\r\u001a\u00020\bX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\r\u0010\n\"\u0004\b\u000e\u0010\fR\u001c\u0010\u000f\u001a\u0004\u0018\u00010\u0010X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0011\u0010\u0012\"\u0004\b\u0013\u0010\u0014R\u0010\u0010\u0015\u001a\u0004\u0018\u00010\u0016X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0017\u001a\u00020\u0018X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001a\u0010\u0019\u001a\u00020\u001aX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u001b\u0010\u001c\"\u0004\b\u001d\u0010\u001eR\u001a\u0010\u001f\u001a\u00020\u001aX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b \u0010\u001c\"\u0004\b!\u0010\u001e\u00a8\u00068"}, d2 = {"Lexpo/modules/image/ImageViewWrapperTarget;", "Lcom/bumptech/glide/request/target/Target;", "Landroid/graphics/drawable/Drawable;", "imageViewHolder", "Ljava/lang/ref/WeakReference;", "Lexpo/modules/image/ExpoImageViewWrapper;", "(Ljava/lang/ref/WeakReference;)V", "hasSource", "", "getHasSource", "()Z", "setHasSource", "(Z)V", "isUsed", "setUsed", "placeholderContentFit", "Lexpo/modules/image/enums/ContentFit;", "getPlaceholderContentFit", "()Lexpo/modules/image/enums/ContentFit;", "setPlaceholderContentFit", "(Lexpo/modules/image/enums/ContentFit;)V", "request", "Lcom/bumptech/glide/request/Request;", "sizeDeterminer", "Lexpo/modules/image/SizeDeterminer;", "sourceHeight", "", "getSourceHeight", "()I", "setSourceHeight", "(I)V", "sourceWidth", "getSourceWidth", "setSourceWidth", "clear", "", "requestManager", "Lcom/bumptech/glide/RequestManager;", "getRequest", "getSize", "cb", "Lcom/bumptech/glide/request/target/SizeReadyCallback;", "onDestroy", "onLoadCleared", "placeholder", "onLoadFailed", "errorDrawable", "onLoadStarted", "onResourceReady", "resource", "transition", "Lcom/bumptech/glide/request/transition/Transition;", "onStart", "onStop", "removeCallback", "setRequest", "expo-image_release"})
public final class ImageViewWrapperTarget implements com.bumptech.glide.request.target.Target<android.graphics.drawable.Drawable> {
    private final java.lang.ref.WeakReference<expo.modules.image.ExpoImageViewWrapper> imageViewHolder = null;
    
    /**
     * Whether the target has a main, non-placeholder source
     */
    private boolean hasSource = false;
    
    /**
     * Whether the target is used - the asset loaded by it has been drawn in the image view
     */
    private boolean isUsed = false;
    
    /**
     * The main source height where -1 means unknown
     */
    private int sourceHeight = -1;
    
    /**
     * The main source width where -1 means unknown
     */
    private int sourceWidth = -1;
    
    /**
     * The content fit of the placeholder
     */
    @org.jetbrains.annotations.Nullable
    private expo.modules.image.enums.ContentFit placeholderContentFit;
    private com.bumptech.glide.request.Request request;
    private expo.modules.image.SizeDeterminer sizeDeterminer;
    
    public ImageViewWrapperTarget(@org.jetbrains.annotations.NotNull
    java.lang.ref.WeakReference<expo.modules.image.ExpoImageViewWrapper> imageViewHolder) {
        super();
    }
    
    public final boolean getHasSource() {
        return false;
    }
    
    public final void setHasSource(boolean p0) {
    }
    
    public final boolean isUsed() {
        return false;
    }
    
    public final void setUsed(boolean p0) {
    }
    
    public final int getSourceHeight() {
        return 0;
    }
    
    public final void setSourceHeight(int p0) {
    }
    
    public final int getSourceWidth() {
        return 0;
    }
    
    public final void setSourceWidth(int p0) {
    }
    
    @org.jetbrains.annotations.Nullable
    public final expo.modules.image.enums.ContentFit getPlaceholderContentFit() {
        return null;
    }
    
    public final void setPlaceholderContentFit(@org.jetbrains.annotations.Nullable
    expo.modules.image.enums.ContentFit p0) {
    }
    
    @java.lang.Override
    public void onResourceReady(@org.jetbrains.annotations.NotNull
    android.graphics.drawable.Drawable resource, @org.jetbrains.annotations.Nullable
    com.bumptech.glide.request.transition.Transition<? super android.graphics.drawable.Drawable> transition) {
    }
    
    @java.lang.Override
    public void onStart() {
    }
    
    @java.lang.Override
    public void onStop() {
    }
    
    @java.lang.Override
    public void onDestroy() {
    }
    
    @java.lang.Override
    public void onLoadStarted(@org.jetbrains.annotations.Nullable
    android.graphics.drawable.Drawable placeholder) {
    }
    
    @java.lang.Override
    public void onLoadFailed(@org.jetbrains.annotations.Nullable
    android.graphics.drawable.Drawable errorDrawable) {
    }
    
    @java.lang.Override
    public void onLoadCleared(@org.jetbrains.annotations.Nullable
    android.graphics.drawable.Drawable placeholder) {
    }
    
    @java.lang.Override
    public void getSize(@org.jetbrains.annotations.NotNull
    com.bumptech.glide.request.target.SizeReadyCallback cb) {
    }
    
    @java.lang.Override
    public void removeCallback(@org.jetbrains.annotations.NotNull
    com.bumptech.glide.request.target.SizeReadyCallback cb) {
    }
    
    @java.lang.Override
    public void setRequest(@org.jetbrains.annotations.Nullable
    com.bumptech.glide.request.Request request) {
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public com.bumptech.glide.request.Request getRequest() {
        return null;
    }
    
    public final void clear(@org.jetbrains.annotations.NotNull
    com.bumptech.glide.RequestManager requestManager) {
    }
}