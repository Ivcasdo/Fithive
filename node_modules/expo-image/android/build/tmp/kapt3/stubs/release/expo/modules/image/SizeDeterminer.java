package expo.modules.image;

import java.lang.System;

@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000>\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010!\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0005\n\u0002\u0010\u0002\n\u0002\b\u0011\b\u0000\u0018\u0000 \'2\u00020\u0001:\u0002\'(B\u0013\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u00a2\u0006\u0002\u0010\u0005J\u0006\u0010\u0017\u001a\u00020\u0018J\u0006\u0010\u0019\u001a\u00020\u0018J\u000e\u0010\u001a\u001a\u00020\u00182\u0006\u0010\u001b\u001a\u00020\bJ \u0010\u001c\u001a\u00020\f2\u0006\u0010\u001d\u001a\u00020\f2\u0006\u0010\u001e\u001a\u00020\f2\u0006\u0010\u001f\u001a\u00020\fH\u0002J\u0010\u0010 \u001a\u00020\u00122\u0006\u0010!\u001a\u00020\fH\u0002J\u0018\u0010\"\u001a\u00020\u00122\u0006\u0010#\u001a\u00020\f2\u0006\u0010$\u001a\u00020\fH\u0002J\u0018\u0010%\u001a\u00020\u00182\u0006\u0010#\u001a\u00020\f2\u0006\u0010$\u001a\u00020\fH\u0002J\u000e\u0010&\u001a\u00020\u00182\u0006\u0010\u001b\u001a\u00020\bR\u0014\u0010\u0006\u001a\b\u0012\u0004\u0012\u00020\b0\u0007X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0014\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0010\u0010\t\u001a\u0004\u0018\u00010\nX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0014\u0010\u000b\u001a\u00020\f8BX\u0082\u0004\u00a2\u0006\u0006\u001a\u0004\b\r\u0010\u000eR\u0014\u0010\u000f\u001a\u00020\f8BX\u0082\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0010\u0010\u000eR\u001a\u0010\u0011\u001a\u00020\u0012X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0013\u0010\u0014\"\u0004\b\u0015\u0010\u0016\u00a8\u0006)"}, d2 = {"Lexpo/modules/image/SizeDeterminer;", "", "imageViewHolder", "Ljava/lang/ref/WeakReference;", "Lexpo/modules/image/ExpoImageViewWrapper;", "(Ljava/lang/ref/WeakReference;)V", "cbs", "", "Lcom/bumptech/glide/request/target/SizeReadyCallback;", "layoutListener", "Lexpo/modules/image/SizeDeterminer$SizeDeterminerLayoutListener;", "targetHeight", "", "getTargetHeight", "()I", "targetWidth", "getTargetWidth", "waitForLayout", "", "getWaitForLayout", "()Z", "setWaitForLayout", "(Z)V", "checkCurrentDimens", "", "clearCallbacksAndListener", "getSize", "cb", "getTargetDimen", "viewSize", "paramSize", "paddingSize", "isDimensionValid", "size", "isViewStateAndSizeValid", "width", "height", "notifyCbs", "removeCallback", "Companion", "SizeDeterminerLayoutListener", "expo-image_release"})
public final class SizeDeterminer {
    private final java.lang.ref.WeakReference<expo.modules.image.ExpoImageViewWrapper> imageViewHolder = null;
    private final java.util.List<com.bumptech.glide.request.target.SizeReadyCallback> cbs = null;
    @com.bumptech.glide.util.Synthetic
    private boolean waitForLayout = false;
    private expo.modules.image.SizeDeterminer.SizeDeterminerLayoutListener layoutListener;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.image.SizeDeterminer.Companion Companion = null;
    private static final int PENDING_SIZE = 0;
    @org.jetbrains.annotations.Nullable
    private static java.lang.Integer maxDisplayLength;
    
    public SizeDeterminer(@org.jetbrains.annotations.NotNull
    java.lang.ref.WeakReference<expo.modules.image.ExpoImageViewWrapper> imageViewHolder) {
        super();
    }
    
    public final boolean getWaitForLayout() {
        return false;
    }
    
    public final void setWaitForLayout(boolean p0) {
    }
    
    private final void notifyCbs(int width, int height) {
    }
    
    @com.bumptech.glide.util.Synthetic
    public final void checkCurrentDimens() {
    }
    
    public final void getSize(@org.jetbrains.annotations.NotNull
    com.bumptech.glide.request.target.SizeReadyCallback cb) {
    }
    
    /**
     * The callback may be called anyway if it is removed by another [SizeReadyCallback] or
     * otherwise removed while we're notifying the list of callbacks.
     *
     *
     * See #2237.
     */
    public final void removeCallback(@org.jetbrains.annotations.NotNull
    com.bumptech.glide.request.target.SizeReadyCallback cb) {
    }
    
    public final void clearCallbacksAndListener() {
    }
    
    private final boolean isViewStateAndSizeValid(int width, int height) {
        return false;
    }
    
    private final int getTargetHeight() {
        return 0;
    }
    
    private final int getTargetWidth() {
        return 0;
    }
    
    private final int getTargetDimen(int viewSize, int paramSize, int paddingSize) {
        return 0;
    }
    
    private final boolean isDimensionValid(int size) {
        return false;
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u001e\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\b\u0002\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004J\b\u0010\u0007\u001a\u00020\bH\u0016R\u0014\u0010\u0005\u001a\b\u0012\u0004\u0012\u00020\u00030\u0006X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\t"}, d2 = {"Lexpo/modules/image/SizeDeterminer$SizeDeterminerLayoutListener;", "Landroid/view/ViewTreeObserver$OnPreDrawListener;", "sizeDeterminer", "Lexpo/modules/image/SizeDeterminer;", "(Lexpo/modules/image/SizeDeterminer;)V", "sizeDeterminerRef", "Ljava/lang/ref/WeakReference;", "onPreDraw", "", "expo-image_release"})
    static final class SizeDeterminerLayoutListener implements android.view.ViewTreeObserver.OnPreDrawListener {
        private final java.lang.ref.WeakReference<expo.modules.image.SizeDeterminer> sizeDeterminerRef = null;
        
        public SizeDeterminerLayoutListener(@org.jetbrains.annotations.NotNull
        expo.modules.image.SizeDeterminer sizeDeterminer) {
            super();
        }
        
        @java.lang.Override
        public boolean onPreDraw() {
            return false;
        }
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u001a\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0018\u0002\n\u0000\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u0007\u001a\u00020\u00042\u0006\u0010\f\u001a\u00020\rH\u0002R\u000e\u0010\u0003\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000R(\u0010\u0005\u001a\u0004\u0018\u00010\u00048\u0006@\u0006X\u0087\u000e\u00a2\u0006\u0016\n\u0002\u0010\u000b\u0012\u0004\b\u0006\u0010\u0002\u001a\u0004\b\u0007\u0010\b\"\u0004\b\t\u0010\n\u00a8\u0006\u000e"}, d2 = {"Lexpo/modules/image/SizeDeterminer$Companion;", "", "()V", "PENDING_SIZE", "", "maxDisplayLength", "getMaxDisplayLength$annotations", "getMaxDisplayLength", "()Ljava/lang/Integer;", "setMaxDisplayLength", "(Ljava/lang/Integer;)V", "Ljava/lang/Integer;", "context", "Landroid/content/Context;", "expo-image_release"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
        
        @org.jetbrains.annotations.Nullable
        public final java.lang.Integer getMaxDisplayLength() {
            return null;
        }
        
        @androidx.annotation.VisibleForTesting
        @java.lang.Deprecated
        public static void getMaxDisplayLength$annotations() {
        }
        
        public final void setMaxDisplayLength(@org.jetbrains.annotations.Nullable
        java.lang.Integer p0) {
        }
        
        private final int getMaxDisplayLength(android.content.Context context) {
            return 0;
        }
    }
}