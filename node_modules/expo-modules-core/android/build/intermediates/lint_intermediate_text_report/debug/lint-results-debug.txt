C:\Users\ivan\.gradle\caches\transforms-3\95aa226eacca12cc12323d65fdade91f\transformed\fragment-1.4.1\jars\lint.jar: Warning: Library lint checks out of date;
these checks will be skipped!

Lint found an issue registry (androidx.fragment.lint.FragmentIssueRegistry)
which was compiled against an older version of lint
than this one. This is usually fine, but not in this
case; some basic verification shows that the lint
check jar references (for example) the following API
which is no longer valid in this version of lint:
org.jetbrains.uast.kotlin.KotlinUClass: org.jetbrains.kotlin.psi.KtClassOrObject getKtClass()
(Referenced from androidx/fragment/lint/OnCreateDialogIncorrectCallbackDetector$UastHandler.class)

Therefore, this lint check library is not included
in analysis. This affects the following lint checks:
FragmentTagUsage
FragmentAddMenuProvider
FragmentBackPressedCallback
FragmentLiveDataObserve
UseRequireInsteadOfGet
UseGetLayoutInflater
DialogFragmentCallbacksDetector
UnsafeRepeatOnLifecycleDetector
DetachAndAttachSameFragment

Recompile the checks against the latest version, or if
this is a check bundled with a third-party library, see
if there is a more recent version available.

Version of Lint API this lint check is using is 11.
The Lint API version currently running is 13 (7.3+). [ObsoleteLintCustomCheck]

   Explanation for issues of type "ObsoleteLintCustomCheck":
   Lint can be extended with "custom checks": additional checks implemented by
   developers and libraries to for example enforce specific API usages
   required by a library or a company coding style guideline.

   The Lint APIs are not yet stable, so these checks may either cause a
   performance degradation, or stop working, or provide wrong results.

   This warning flags custom lint checks that are found to be using obsolete
   APIs and will need to be updated to run in the current lint environment.

   It may also flag issues found to be using a newer version of the API,
   meaning that you need to use a newer version of lint (or Android Studio or
   Gradle plugin etc) to work with these checks.

D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-modules-core\android\src\main\java\expo\modules\adapters\react\permissions\PermissionsService.kt:327: Warning: This method should be annotated with @ChecksSdkIntAtLeast(api=Build.VERSION_CODES.M) [AnnotateVersionCheck]
  private fun isRuntimePermissionsAvailable() = Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "AnnotateVersionCheck":
   Methods which perform SDK_INT version checks (or field constants which
   reflect the result of a version check) in libraries should be annotated
   with @ChecksSdkIntAtLeast. This makes it possible for lint to correctly
   check calls into the library later to correctly understand that problematic
   code which is wrapped within a call into this library is safe after all.

D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-modules-core\android\src\main\java\expo\modules\kotlin\types\ColorTypeConverter.kt:201: Error: Call requires API level 26 (current min is 21): android.graphics.Color#valueOf [NewApi]
    return Color.valueOf(value[0].toFloat(), value[1].toFloat(), value[2].toFloat(), alpha.toFloat())
                 ~~~~~~~
D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-modules-core\android\src\main\java\expo\modules\kotlin\types\ColorTypeConverter.kt:205: Error: Call requires API level 26 (current min is 21): android.graphics.Color#valueOf [NewApi]
    return Color.valueOf(value)
                 ~~~~~~~
D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-modules-core\android\src\main\java\expo\modules\kotlin\types\ColorTypeConverter.kt:211: Error: Call requires API level 26 (current min is 21): android.graphics.Color#valueOf [NewApi]
      return Color.valueOf(
                   ~~~~~~~
D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-modules-core\android\src\main\java\expo\modules\kotlin\types\ColorTypeConverter.kt:219: Error: Call requires API level 26 (current min is 21): android.graphics.Color#valueOf [NewApi]
    return Color.valueOf(Color.parseColor(value))
                 ~~~~~~~
D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-modules-core\android\src\main\java\expo\modules\kotlin\types\io\PathTypeConverter.kt:13: Error: Call requires API level 26 (current min is 21): java.nio.file.Paths#get [NewApi]
    return Paths.get(stringPath)
                 ~~~
D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-modules-core\android\src\main\java\expo\modules\kotlin\types\io\PathTypeConverter.kt:18: Error: Call requires API level 26 (current min is 21): java.nio.file.Paths#get [NewApi]
    return Paths.get(stringPath)
                 ~~~

   Explanation for issues of type "NewApi":
   This check scans through all the Android API calls in the application and
   warns about any calls that are not available on all versions targeted by
   this application (according to its minimum SDK attribute in the manifest).

   If you really want to use this API and don't need to support older devices
   just set the minSdkVersion in your build.gradle or AndroidManifest.xml
   files.

   If your code is deliberately accessing newer APIs, and you have ensured
   (e.g. with conditional execution) that this code will only ever be called
   on a supported platform, then you can annotate your class or method with
   the @TargetApi annotation specifying the local minimum SDK to apply, such
   as @TargetApi(11), such that this check considers 11 rather than your
   manifest file's minimum SDK as the required API level.

   If you are deliberately setting android: attributes in style definitions,
   make sure you place this in a values-vNN folder in order to avoid running
   into runtime conflicts on certain devices where manufacturers have added
   custom attributes whose ids conflict with the new ones on later platforms.

   Similarly, you can use tools:targetApi="11" in an XML file to indicate that
   the element will only be inflated in an adequate context.

D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-modules-core\android\src\main\java\expo\modules\core\utilities\EmulatorUtilities.kt:30: Warning: Using SERIAL to get device identifiers is not recommended [HardwareIds]
      Build.SERIAL.lowercase(Locale.ROOT).contains("nox") ||
            ~~~~~~

   Explanation for issues of type "HardwareIds":
   Using these device identifiers is not recommended other than for high value
   fraud prevention and advanced telephony use-cases. For advertising
   use-cases, use AdvertisingIdClient$Info#getId and for analytics, use
   InstanceId#getId.

   https://developer.android.com/training/articles/user-data-ids.html

6 errors, 3 warnings
