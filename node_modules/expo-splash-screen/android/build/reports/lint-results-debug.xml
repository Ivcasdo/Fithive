<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 7.4.2">

    <issue
        id="ObsoleteLintCustomCheck"
        severity="Warning"
        message="Library lint checks out of date;&#xA;these checks **will be skipped**!&#xA;&#xA;Lint found an issue registry (`androidx.fragment.lint.FragmentIssueRegistry`)&#xA;which was compiled against an older version of lint&#xA;than this one. This is usually fine, but not in this&#xA;case; some basic verification shows that the lint&#xA;check jar references (for example) the following API&#xA;which is no longer valid in this version of lint:&#xA;org.jetbrains.uast.kotlin.KotlinUClass: org.jetbrains.kotlin.psi.KtClassOrObject getKtClass()&#xA;(Referenced from androidx/fragment/lint/OnCreateDialogIncorrectCallbackDetector$UastHandler.class)&#xA;&#xA;Therefore, this lint check library is **not** included&#xA;in analysis. This affects the following lint checks:&#xA;`FragmentTagUsage`&#xA;`FragmentAddMenuProvider`&#xA;`FragmentBackPressedCallback`&#xA;`FragmentLiveDataObserve`&#xA;`UseRequireInsteadOfGet`&#xA;`UseGetLayoutInflater`&#xA;`DialogFragmentCallbacksDetector`&#xA;`UnsafeRepeatOnLifecycleDetector`&#xA;`DetachAndAttachSameFragment`&#xA;&#xA;Recompile the checks against the latest version, or if&#xA;this is a check bundled with a third-party library, see&#xA;if there is a more recent version available.&#xA;&#xA;Version of Lint API this lint check is using is 11.&#xA;The Lint API version currently running is 13 (7.3+)."
        category="Lint"
        priority="10"
        summary="Obsolete custom lint check"
        explanation="Lint can be extended with &quot;custom checks&quot;: additional checks implemented by developers and libraries to for example enforce specific API usages required by a library or a company coding style guideline.&#xA;&#xA;The Lint APIs are not yet stable, so these checks may either cause a performance degradation, or stop working, or provide wrong results.&#xA;&#xA;This warning flags custom lint checks that are found to be using obsolete APIs and will need to be updated to run in the current lint environment.&#xA;&#xA;It may also flag issues found to be using a **newer** version of the API, meaning that you need to use a newer version of lint (or Android Studio or Gradle plugin etc) to work with these checks.">
        <location
            file="C:\Users\ivan\.gradle\caches\transforms-3\95aa226eacca12cc12323d65fdade91f\transformed\fragment-1.4.1\jars\lint.jar"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="      context.getString(R.string.expo_splash_screen_resize_mode).toLowerCase()"
        errorLine2="                                                                 ~~~~~~~~~~~">
        <location
            file="D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-splash-screen\android\src\main\java\expo\modules\splashscreen\SplashScreenReactActivityLifecycleListener.kt"
            line="35"
            column="66"/>
    </issue>

    <issue
        id="CustomSplashScreen"
        severity="Warning"
        message="The application should not provide its own launch screen"
        category="Correctness"
        priority="5"
        summary="Application-defined Launch Screen"
        explanation="Starting in Android 12 (API 31+), the application&apos;s Launch Screen is provided by the system and the application should not create its own, otherwise the user will see two splashscreens. Please check the `SplashScreen` class to check how the Splash Screen can be controlled and customized."
        url="https://developer.android.com/guide/topics/ui/splash-screen"
        urls="https://developer.android.com/guide/topics/ui/splash-screen"
        errorLine1="class SplashScreenView("
        errorLine2="      ~~~~~~~~~~~~~~~~">
        <location
            file="D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-splash-screen\android\src\main\java\expo\modules\splashscreen\SplashScreenView.kt"
            line="15"
            column="7"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.style.Theme_App_SplashScreen` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="  &lt;style name=&quot;Theme.App.SplashScreen&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-splash-screen\android\src\main\res\values\styles_splashscreen.xml"
            line="5"
            column="10"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/splashscreen_image.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="https://developer.android.com/guide/practices/screens_support.html"
        urls="https://developer.android.com/guide/practices/screens_support.html">
        <location
            file="D:\universidad\TFG\RepositorioAplicacion\TFG\node_modules\expo-splash-screen\android\src\main\res\drawable\splashscreen_image.png"/>
    </issue>

</issues>
